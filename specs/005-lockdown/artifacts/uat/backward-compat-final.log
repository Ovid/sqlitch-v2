Backward compatibility harness (sqitch â†’ sqlitch)


============================================================
STEP: Step 1: Initialize Project
COMMAND: sqitch init flipr --uri https://github.com/sqitchers/sqitch-sqlite-intro/ --engine sqlite
============================================================
Created sqitch.conf
Created sqitch.plan
Created deploy/
Created revert/
Created verify/

============================================================
STEP: Step 2: Configure User Name
COMMAND: sqlitch config user.name Test User
============================================================
Set user.name in local scope

============================================================
STEP: Step 3: Configure User Email
COMMAND: sqitch config user.email test@example.com
============================================================


============================================================
STEP: Step 4: Disable Pager
COMMAND: sqlitch config --bool core.pager false
============================================================
Set core.pager in local scope

============================================================
STEP: Step 5: Add 'users' Table
COMMAND: sqitch add users -n Creates table to track our users.
============================================================
Created deploy/users.sql
Created revert/users.sql
Created verify/users.sql
Added "users" to sqitch.plan

============================================================
STEP: Step 6: Deploy 'users' Table
COMMAND: sqlitch deploy db:sqlite:flipr_test.db
============================================================
Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
Adding registry tables to db:sqlite:/Users/poecurt/projects/sqlitch/uat/backward_compat_results/sqitch.db
  + users
Deployment complete. Applied 1 change(s).

============================================================
STEP: Step 7: Verify 'users' Deployment
COMMAND: sqitch verify db:sqlite:flipr_test.db
============================================================
Verifying db:sqlite:flipr_test.db
  * users .. ok
Verify successful

============================================================
STEP: Step 8: Check Status After Deploy
COMMAND: sqlitch status db:sqlite:flipr_test.db
============================================================
# On database db:sqlite:flipr_test.db
# Project:  flipr
# Change:   [REDACTED_CHANGE_ID]
# Name:     users
# Deployed: 2025-10-11 20:09:56.048813
# By:       Test User <test@example.com>
# 
Nothing to deploy (up-to-date)

============================================================
STEP: Step 9: Check DB Schema with sqlite3
COMMAND: sqlite3 flipr_test.db .tables
============================================================
users

============================================================
STEP: Step 10: Revert 'users' Table
COMMAND: sqlitch revert db:sqlite:flipr_test.db -y
============================================================
Reverting all changes from db:sqlite:flipr_test.db
  - users .. ok

============================================================
STEP: Step 11: Verify Revert with sqlite3
COMMAND: sqlite3 flipr_test.db .tables
============================================================


============================================================
STEP: Step 12: Check Sqitch Log
COMMAND: sqlitch log db:sqlite:flipr_test.db
============================================================
On database db:sqlite:flipr_test.db
Revert [REDACTED_CHANGE_ID]
Name:      users
Committer: Test User <test@example.com>
Date:      2025-10-11 20:09:SS

    Creates table to track our users.

Deploy [REDACTED_CHANGE_ID]
Name:      users
Committer: Test User <test@example.com>
Date:      2025-10-11 20:09:SS
    Creates table to track our users.


============================================================
STEP: Step 13: Add Target 'flipr_test'
COMMAND: sqitch target add flipr_test db:sqlite:flipr_test.db
============================================================


============================================================
STEP: Step 14: Add Engine for Target
COMMAND: sqlitch engine add sqlite flipr_test
============================================================
Created engine 'sqlite'

============================================================
STEP: Step 15: Enable Deploy Verification
COMMAND: sqitch config --bool deploy.verify true
============================================================


============================================================
STEP: Step 16: Enable Rebase Verification
COMMAND: sqlitch config --bool rebase.verify true
============================================================
Set rebase.verify in local scope

============================================================
STEP: Step 17: Deploy Again with Target
COMMAND: sqitch deploy
============================================================
Deploying changes to flipr_test
  + users .. ok

============================================================
STEP: Step 18: Add 'flips' Table
COMMAND: sqlitch add flips --requires users -n Adds table for storing flips.
============================================================
Created deploy/flips.sql
Created revert/flips.sql
Created verify/flips.sql
Added "flips" to sqitch.plan

============================================================
STEP: Step 19: Deploy 'flips' Table
COMMAND: sqitch deploy
============================================================
Deploying changes to flipr_test
  + flips .. ok

============================================================
STEP: Step 20: Verify All Deployments
COMMAND: sqlitch verify
============================================================
Verifying flipr_test
  * users .. ok
  * flips .. ok
Verify successful

============================================================
STEP: Step 21: Check DB Schema for 'users' and 'flips'
COMMAND: sqlite3 flipr_test.db .tables
============================================================
flips  users

============================================================
STEP: Step 22: Partial Revert to HEAD^
COMMAND: sqlitch revert --to @HEAD^ -y
============================================================
Reverting changes to users from flipr_test
  - flips .. ok

============================================================
STEP: Step 23: Verify Partial Revert
COMMAND: sqlite3 flipr_test.db .tables
============================================================
users

============================================================
STEP: Step 24: Deploy All Again
COMMAND: sqlitch deploy
============================================================
Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
  + flips
Deployment complete. Applied 1 change(s).

============================================================
STEP: Step 25: Add 'userflips' View
COMMAND: sqitch add userflips --requires users --requires flips -n Creates the userflips view.
============================================================
Created deploy/userflips.sql
Created revert/userflips.sql
Created verify/userflips.sql
Added "userflips [users flips]" to sqitch.plan

============================================================
STEP: Step 26: Deploy 'userflips' View
COMMAND: sqlitch deploy
============================================================
Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
  + userflips
Deployment complete. Applied 1 change(s).

============================================================
STEP: Step 27: Full Revert
COMMAND: sqitch revert -y
============================================================
Reverting all changes from flipr_test
  - userflips .. ok
  - flips ...... ok
  - users ...... ok

============================================================
STEP: Step 28: Full Redeploy
COMMAND: sqlitch deploy
============================================================
Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
  + users
  + flips
  + userflips
Deployment complete. Applied 3 change(s).

============================================================
STEP: Step 29: Tag Release v1.0.0-dev1
COMMAND: sqitch tag v1.0.0-dev1 -n Tag v1.0.0-dev1.
============================================================
Tagged "userflips" with @v1.0.0-dev1 in sqitch.plan

============================================================
STEP: Step 30: Deploy Tag to New DB
COMMAND: sqlitch deploy db:sqlite:dev/flipr.db
============================================================
Deploying plan 'flipr' to target 'db:sqlite:dev/flipr.db'.
Adding registry tables to db:sqlite:/Users/poecurt/projects/sqlitch/uat/backward_compat_results/dev/sqitch.db
  + users
  + flips
  + userflips
Deployment complete. Applied 3 change(s).

============================================================
STEP: Step 31: Check Status of Tagged DB
COMMAND: sqitch status db:sqlite:dev/flipr.db
============================================================
# On database db:sqlite:dev/flipr.db
# Project:  flipr
# Change:   [REDACTED_CHANGE_ID]
# Name:     userflips
# Tag:      v1.0.0-dev1
# Deployed: 2025-10-11 22:09:58 +0200
# By:       Test User <test@example.com>
# 
Nothing to deploy (up-to-date)

============================================================
STEP: Step 32: Create Bundle
COMMAND: sqlitch bundle
============================================================
Bundled project to bundle

============================================================
STEP: Step 33: Deploy Bundle to New DB
COMMAND: sqitch deploy db:sqlite:flipr_prod.db -C bundle
============================================================
Adding registry tables to db:sqlite:sqitch.db
Deploying changes to db:sqlite:flipr_prod.db
  + users ................... ok
  + flips ................... ok
  + userflips @v1.0.0-dev1 .. ok

============================================================
STEP: Step 34: Add 'hashtags' Table
COMMAND: sqlitch add hashtags --requires flips -n Adds table for storing hashtags.
============================================================
Created deploy/hashtags.sql
Created revert/hashtags.sql
Created verify/hashtags.sql
Added "hashtags" to sqitch.plan

============================================================
STEP: Step 35: Deploy 'hashtags' Table
COMMAND: sqitch deploy
============================================================
Deploying changes to flipr_test
  + hashtags .. ok

============================================================
STEP: Step 36: Check Status with Tags
COMMAND: sqlitch status --show-tags
============================================================
# On database flipr_test
# Project:  flipr
# Change:   [REDACTED_CHANGE_ID]
# Name:     hashtags
# Deployed: 2025-10-11 20:09:59.569
# By:       Test User <test@example.com>
# 
Nothing to deploy (up-to-date)

============================================================
STEP: Step 37: Rebase Plan
COMMAND: sqitch rebase -y
============================================================
Reverting all changes from flipr_test
  - hashtags ................ ok
  - userflips @v1.0.0-dev1 .. ok
  - flips ................... ok
  - users ................... ok
Deploying changes to flipr_test
  + users ................... ok
  + flips ................... ok
  + userflips @v1.0.0-dev1 .. ok
  + hashtags ................ ok

============================================================
STEP: Step 38: Tag Release v1.0.0-dev2
COMMAND: sqlitch tag v1.0.0-dev2 -n Tag v1.0.0-dev2.
============================================================
Tagged hashtags with @v1.0.0-dev2

============================================================
STEP: Step 39: Rework 'userflips' View
COMMAND: sqitch rework userflips -n Adds userflips.twitter.
============================================================
Added "userflips [userflips@v1.0.0-dev2]" to sqitch.plan.
Modify these files as appropriate:
  * deploy/userflips.sql
  * revert/userflips.sql
  * verify/userflips.sql

============================================================
STEP: Step 40: Deploy Reworked View
COMMAND: sqlitch deploy
============================================================
Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
  + userflips
Deployment complete. Applied 1 change(s).

============================================================
STEP: Step 41: Verify Reworked Schema
COMMAND: sqlite3 flipr_test.db .schema userflips
============================================================
CREATE VIEW userflips AS
SELECT f.id, u.nickname, u.fullname, u.twitter, f.body, f.timestamp
FROM users u
JOIN flips f ON u.nickname = f.nickname
/* userflips(id,nickname,fullname,twitter,body,timestamp) */;

============================================================
STEP: Step 42: Revert Reworked Change
COMMAND: sqlitch revert --to @HEAD^ -y
============================================================
Reverting changes to hashtags from flipr_test
  - userflips .. ok

============================================================
STEP: Step 43: Verify Revert of Rework
COMMAND: sqlite3 flipr_test.db .schema userflips
============================================================
CREATE VIEW userflips AS
SELECT f.id, u.nickname, u.fullname, f.body, f.timestamp
FROM users u
JOIN flips f ON u.nickname = f.nickname
/* userflips(id,nickname,fullname,body,timestamp) */;

============================================================
STEP: Step 44: Final Deployment
COMMAND: sqlitch deploy
============================================================
Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
  + userflips
Deployment complete. Applied 1 change(s).

============================================================
STEP: Step 45: Final Verification
COMMAND: sqitch verify
============================================================
Verifying flipr_test
  * users ................................ ok
  * flips ................................ ok
  * userflips @v1.0.0-dev1 @v1.0.0-dev1 .. ok
  * hashtags @v1.0.0-dev2 ................ ok
  * userflips ............................ ok
Verify successful

============================================================
STEP: Step 46: Final Status Check
COMMAND: sqlitch status
============================================================
# On database flipr_test
# Project:  flipr
# Change:   [REDACTED_CHANGE_ID]
# Name:     userflips
# Deployed: 2025-10-11 20:10:00.591148
# By:       Test User <test@example.com>
# 
Nothing to deploy (up-to-date)