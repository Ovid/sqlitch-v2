============================================================
Sqitch vs. Sqlitch Functional Equivalence Test (User-Focused)
============================================================

Checking for required commands...
Setting up test environment...
Test directories created.


============================================================
▶️  STEP 1: Initialize Project
    COMMAND: sqlitch init flipr --uri https://github.com/sqitchers/sqitch-sqlite-intro/ --engine sqlite
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Created sqitch.conf
Created sqitch.plan
Created deploy/
Created revert/
Created verify/

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Created sqitch.conf
Created sqitch.plan
Created deploy/
Created revert/
Created verify/

    ✅ Step completed successfully

============================================================
▶️  STEP 2: Configure User Name
    COMMAND: sqlitch config user.name Test User
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Set user.name in local scope
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -0,0 +1 @@
+Set user.name in local scope

    ✅ Step completed successfully

============================================================
▶️  STEP 3: Configure User Email
    COMMAND: sqlitch config user.email test@example.com
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Set user.email in local scope
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -0,0 +1 @@
+Set user.email in local scope

    ✅ Step completed successfully

============================================================
▶️  STEP 4: Disable Pager
    COMMAND: sqlitch config --bool core.pager false
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Set core.pager in local scope
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -0,0 +1 @@
+Set core.pager in local scope

    ✅ Step completed successfully

============================================================
▶️  STEP 5: Add 'users' Table
    COMMAND: sqlitch add users -n Creates table to track our users.
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Created deploy/users.sql
Created revert/users.sql
Created verify/users.sql
Added "users" to sqitch.plan

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Created deploy/users.sql
Created revert/users.sql
Created verify/users.sql
Added "users" to sqitch.plan

    ✅ Step completed successfully

============================================================
▶️  STEP 6: Deploy 'users' Table
    COMMAND: sqlitch deploy db:sqlite:flipr_test.db
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Adding registry tables to db:sqlite:sqitch.db
Deploying changes to db:sqlite:flipr_test.db
  + users .. ok

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
Adding registry tables to db:sqlite:/Users/poecurt/projects/sqlitch/uat/sqlitch_results/sqitch.db
  + users
Deployment complete. Applied 1 change(s).
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1,3 +1,4 @@
-Adding registry tables to db:sqlite:sqitch.db
-Deploying changes to db:sqlite:flipr_test.db
-  + users .. ok+Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
+Adding registry tables to db:sqlite:/Users/poecurt/projects/sqlitch/uat/sqlitch_results/sqitch.db
+  + users
+Deployment complete. Applied 1 change(s).

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 7: Verify 'users' Deployment
    COMMAND: sqlitch verify db:sqlite:flipr_test.db
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Verifying db:sqlite:flipr_test.db
  * users .. ok
Verify successful

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Verifying flipr_test
  * users .. ok
Verify successful
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1,3 +1,3 @@
-Verifying db:sqlite:flipr_test.db
+Verifying flipr_test
   * users .. ok
 Verify successful

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 8: Check Status After Deploy
    COMMAND: sqlitch status db:sqlite:flipr_test.db
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
# On database db:sqlite:flipr_test.db
# Project:  flipr
# Change:   67f2bbe2f77f218f27e0e5baa9708e38f983b4d5
# Name:     users
# Deployed: 2025-10-11 21:03:03 +0200
# By:       Test User <test@example.com>
# 
Nothing to deploy (up-to-date)

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
# On database db:sqlite:flipr_test.db
# Project:  flipr
# Change:   67f2bbe2f77f218f27e0e5baa9708e38f983b4d5
# Name:     users
# Deployed: 2025-10-11 19:03:03.174032
# By:       Test User <test@example.com>
# 
Nothing to deploy (up-to-date)
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -2,7 +2,7 @@
 # Project:  flipr
 # Change:   [REDACTED_CHANGE_ID]
 # Name:     users
-# Deployed: 2025-10-11 21:03:03 +0200
+# Deployed: 2025-10-11 19:03:03.174032
 # By:       Test User <test@example.com>
 # 
 Nothing to deploy (up-to-date)

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 9: Check DB Schema with sqlite3
    COMMAND: sqlite3 flipr_test.db .tables
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
users

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
users

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 10: Revert 'users' Table
    COMMAND: sqlitch revert db:sqlite:flipr_test.db -y
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Reverting all changes from db:sqlite:flipr_test.db
  - users .. ok

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Reverting all changes from db:sqlite:flipr_test.db
  - users .. ok

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 11: Verify Revert with sqlite3
    COMMAND: sqlite3 flipr_test.db .tables
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 12: Check Sqitch Log
    COMMAND: sqlitch log db:sqlite:flipr_test.db
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
On database db:sqlite:flipr_test.db
Revert 67f2bbe2f77f218f27e0e5baa9708e38f983b4d5
Name:      users
Committer: Test User <test@example.com>
Date:      2025-10-11 21:03:04 +0200

    Creates table to track our users.

Deploy 67f2bbe2f77f218f27e0e5baa9708e38f983b4d5
Name:      users
Committer: Test User <test@example.com>
Date:      2025-10-11 21:03:03 +0200

    Creates table to track our users.


    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
On database db:sqlite:flipr_test.db
Revert 67f2bbe2f77f218f27e0e5baa9708e38f983b4d5
Name:      users
Committer: Test User <test@example.com>
Date:      2025-10-11 19:03:04.104

    Creates table to track our users.

Deploy 67f2bbe2f77f218f27e0e5baa9708e38f983b4d5
Name:      users
Committer: Test User <test@example.com>
Date:      2025-10-11 19:03:03.174032
    Creates table to track our users.

⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -2,13 +2,12 @@
 Revert [REDACTED_CHANGE_ID]
 Name:      users
 Committer: Test User <test@example.com>
-Date:      2025-10-11 21:03:SS +0200
+Date:      2025-10-11 19:03:SS
 
     Creates table to track our users.
 
 Deploy [REDACTED_CHANGE_ID]
 Name:      users
 Committer: Test User <test@example.com>
-Date:      2025-10-11 21:03:SS +0200
-
+Date:      2025-10-11 19:03:SS
     Creates table to track our users.


    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 13: Add Target 'flipr_test'
    COMMAND: sqlitch target add flipr_test db:sqlite:flipr_test.db
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Added target flipr_test
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -0,0 +1 @@
+Added target flipr_test

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 14: Add Engine for Target
    COMMAND: sqlitch engine add sqlite flipr_test
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Created engine 'sqlite'
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -0,0 +1 @@
+Created engine 'sqlite'

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 15: Enable Deploy Verification
    COMMAND: sqlitch config --bool deploy.verify true
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Set deploy.verify in local scope
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -0,0 +1 @@
+Set deploy.verify in local scope

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 16: Enable Rebase Verification
    COMMAND: sqlitch config --bool rebase.verify true
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Set rebase.verify in local scope
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -0,0 +1 @@
+Set rebase.verify in local scope

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 17: Deploy Again with Target
    COMMAND: sqlitch deploy
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Deploying changes to flipr_test
  + users .. ok

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
  + users
Deployment complete. Applied 1 change(s).
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1,2 +1,3 @@
-Deploying changes to flipr_test
-  + users .. ok+Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
+  + users
+Deployment complete. Applied 1 change(s).

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 18: Add 'flips' Table
    COMMAND: sqlitch add flips --requires users -n Adds table for storing flips.
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Created deploy/flips.sql
Created revert/flips.sql
Created verify/flips.sql
Added "flips [users]" to sqitch.plan

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Created deploy/flips.sql
Created revert/flips.sql
Created verify/flips.sql
Added "flips" to sqitch.plan
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1,4 +1,4 @@
 Created deploy/flips.sql
 Created revert/flips.sql
 Created verify/flips.sql
-Added "flips [users]" to sqitch.plan+Added "flips" to sqitch.plan

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 19: Deploy 'flips' Table
    COMMAND: sqlitch deploy
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Deploying changes to flipr_test
  + flips .. ok

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
  + flips
Deployment complete. Applied 1 change(s).
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1,2 +1,3 @@
-Deploying changes to flipr_test
-  + flips .. ok+Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
+  + flips
+Deployment complete. Applied 1 change(s).

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 20: Verify All Deployments
    COMMAND: sqlitch verify
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Verifying flipr_test
  * users .. ok
  * flips .. ok
Verify successful

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Verifying flipr_test
  * users .. ok
  * flips .. ok
Verify successful

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 21: Check DB Schema for 'users' and 'flips'
    COMMAND: sqlite3 flipr_test.db .tables
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
flips  users

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
flips  users

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 22: Partial Revert to HEAD^
    COMMAND: sqlitch revert --to @HEAD^ -y
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Reverting changes to users from flipr_test
  - flips .. ok

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Reverting changes to users from flipr_test
  - flips .. ok

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 23: Verify Partial Revert
    COMMAND: sqlite3 flipr_test.db .tables
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
users

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
users

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 24: Deploy All Again
    COMMAND: sqlitch deploy
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Deploying changes to flipr_test
  + flips .. ok

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
  + flips
Deployment complete. Applied 1 change(s).
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1,2 +1,3 @@
-Deploying changes to flipr_test
-  + flips .. ok+Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
+  + flips
+Deployment complete. Applied 1 change(s).

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 25: Add 'userflips' View
    COMMAND: sqlitch add userflips --requires users --requires flips -n Creates the userflips view.
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Created deploy/userflips.sql
Created revert/userflips.sql
Created verify/userflips.sql
Added "userflips [users flips]" to sqitch.plan

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Created deploy/userflips.sql
Created revert/userflips.sql
Created verify/userflips.sql
Added "userflips" to sqitch.plan
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1,4 +1,4 @@
 Created deploy/userflips.sql
 Created revert/userflips.sql
 Created verify/userflips.sql
-Added "userflips [users flips]" to sqitch.plan+Added "userflips" to sqitch.plan

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 26: Deploy 'userflips' View
    COMMAND: sqlitch deploy
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Deploying changes to flipr_test
  + userflips .. ok

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
  + userflips
Deployment complete. Applied 1 change(s).
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1,2 +1,3 @@
-Deploying changes to flipr_test
-  + userflips .. ok+Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
+  + userflips
+Deployment complete. Applied 1 change(s).

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 27: Full Revert
    COMMAND: sqlitch revert -y
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Reverting all changes from flipr_test
  - userflips .. ok
  - flips ...... ok
  - users ...... ok

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Reverting all changes from flipr_test
  - userflips .. ok
  - flips .. ok
  - users .. ok
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1,4 +1,4 @@
 Reverting all changes from flipr_test
   - userflips .. ok
-  - flips ...... ok
-  - users ...... ok+  - flips .. ok
+  - users .. ok

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 28: Full Redeploy
    COMMAND: sqlitch deploy
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Deploying changes to flipr_test
  + users ...... ok
  + flips ...... ok
  + userflips .. ok

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
  + users
  + flips
  + userflips
Deployment complete. Applied 3 change(s).
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1,4 +1,5 @@
-Deploying changes to flipr_test
-  + users ...... ok
-  + flips ...... ok
-  + userflips .. ok+Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
+  + users
+  + flips
+  + userflips
+Deployment complete. Applied 3 change(s).

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 29: Tag Release v1.0.0-dev1
    COMMAND: sqlitch tag v1.0.0-dev1 -n Tag v1.0.0-dev1.
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Tagged "userflips" with @v1.0.0-dev1 in sqitch.plan

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Tagged userflips with @v1.0.0-dev1
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1 +1 @@
-Tagged "userflips" with @v1.0.0-dev1 in sqitch.plan+Tagged userflips with @v1.0.0-dev1

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 30: Deploy Tag to New DB
    COMMAND: sqlitch deploy db:sqlite:dev/flipr.db
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Adding registry tables to db:sqlite:dev/sqitch.db
Deploying changes to db:sqlite:dev/flipr.db
  + users ................... ok
  + flips ................... ok
  + userflips @v1.0.0-dev1 .. ok

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Deploying plan 'flipr' to target 'db:sqlite:dev/flipr.db'.
Adding registry tables to db:sqlite:/Users/poecurt/projects/sqlitch/uat/sqlitch_results/dev/sqitch.db
  + users
  + flips
  + userflips
Deployment complete. Applied 3 change(s).
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1,5 +1,6 @@
-Adding registry tables to db:sqlite:dev/sqitch.db
-Deploying changes to db:sqlite:dev/flipr.db
-  + users ................... ok
-  + flips ................... ok
-  + userflips @v1.0.0-dev1 .. ok+Deploying plan 'flipr' to target 'db:sqlite:dev/flipr.db'.
+Adding registry tables to db:sqlite:/Users/poecurt/projects/sqlitch/uat/sqlitch_results/dev/sqitch.db
+  + users
+  + flips
+  + userflips
+Deployment complete. Applied 3 change(s).

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 31: Check Status of Tagged DB
    COMMAND: sqlitch status db:sqlite:dev/flipr.db
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
# On database db:sqlite:dev/flipr.db
# Project:  flipr
# Change:   005c7be28ac87c26e25d66bf98f5f195503a924f
# Name:     userflips
# Tag:      @v1.0.0-dev1
# Deployed: 2025-10-11 21:03:09 +0200
# By:       Test User <test@example.com>
# 
Nothing to deploy (up-to-date)

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
# On database db:sqlite:dev/flipr.db
# Project:  flipr
# Change:   87553adaec2d3f4c88eb6e40ae0055400b305ded
# Name:     userflips
# Tag:      @v1.0.0-dev1
# Deployed: 2025-10-11 19:03:09.317694
# By:       Test User <test@example.com>
# 
Nothing to deploy (up-to-date)
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -3,7 +3,7 @@
 # Change:   [REDACTED_CHANGE_ID]
 # Name:     userflips
 # Tag:      @v1.0.0-dev1
-# Deployed: 2025-10-11 21:03:09 +0200
+# Deployed: 2025-10-11 19:03:09.317694
 # By:       Test User <test@example.com>
 # 
 Nothing to deploy (up-to-date)

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 32: Create Bundle
    COMMAND: sqlitch bundle
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Bundling into bundle
Writing config
Writing plan
Writing scripts
  + users
  + flips
  + userflips @v1.0.0-dev1

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Bundled project to bundle
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1,7 +1 @@
-Bundling into bundle
-Writing config
-Writing plan
-Writing scripts
-  + users
-  + flips
-  + userflips @v1.0.0-dev1+Bundled project to bundle

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 33: Deploy Bundle to New DB
    COMMAND: sqlitch deploy db:sqlite:flipr_prod.db -C bundle
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Adding registry tables to db:sqlite:sqitch.db
Deploying changes to db:sqlite:flipr_prod.db
  + users ................... ok
  + flips ................... ok
  + userflips @v1.0.0-dev1 .. ok

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Deploying plan 'flipr' to target 'db:sqlite:flipr_prod.db'.
Nothing to deploy (up-to-date).
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1,5 +1,2 @@
-Adding registry tables to db:sqlite:sqitch.db
-Deploying changes to db:sqlite:flipr_prod.db
-  + users ................... ok
-  + flips ................... ok
-  + userflips @v1.0.0-dev1 .. ok+Deploying plan 'flipr' to target 'db:sqlite:flipr_prod.db'.
+Nothing to deploy (up-to-date).

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 34: Add 'hashtags' Table
    COMMAND: sqlitch add hashtags --requires flips -n Adds table for storing hashtags.
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Created deploy/hashtags.sql
Created revert/hashtags.sql
Created verify/hashtags.sql
Added "hashtags [flips]" to sqitch.plan

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Created deploy/hashtags.sql
Created revert/hashtags.sql
Created verify/hashtags.sql
Added "hashtags" to sqitch.plan
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1,4 +1,4 @@
 Created deploy/hashtags.sql
 Created revert/hashtags.sql
 Created verify/hashtags.sql
-Added "hashtags [flips]" to sqitch.plan+Added "hashtags" to sqitch.plan

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 35: Deploy 'hashtags' Table
    COMMAND: sqlitch deploy
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Deploying changes to flipr_test
  + hashtags .. ok

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
  + hashtags
Deployment complete. Applied 1 change(s).
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1,2 +1,3 @@
-Deploying changes to flipr_test
-  + hashtags .. ok+Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
+  + hashtags
+Deployment complete. Applied 1 change(s).

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 36: Check Status with Tags
    COMMAND: sqlitch status --show-tags
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
# On database flipr_test
# Project:  flipr
# Change:   ced8be2b830eccf22afafb6ade9411d9b8442417
# Name:     hashtags
# Deployed: 2025-10-11 21:03:10 +0200
# By:       Test User <test@example.com>
# 
# Tag:
#   @v1.0.0-dev1 - 2025-10-11 21:03:10 +0200 - Test User <test@example.com>
# 
Nothing to deploy (up-to-date)

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
# On database flipr_test
# Project:  flipr
# Change:   fd05af1ef5424d4d5876d2d401c48f9a73da641f
# Name:     hashtags
# Deployed: 2025-10-11 19:03:10.873838
# By:       Test User <test@example.com>
# 
Nothing to deploy (up-to-date)
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -2,10 +2,7 @@
 # Project:  flipr
 # Change:   [REDACTED_CHANGE_ID]
 # Name:     hashtags
-# Deployed: 2025-10-11 21:03:10 +0200
+# Deployed: 2025-10-11 19:03:10.873838
 # By:       Test User <test@example.com>
 # 
-# Tag:
-#   @v1.0.0-dev1 - 2025-10-11 21:03:SS +0200 - Test User <test@example.com>
-# 
 Nothing to deploy (up-to-date)

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 37: Rebase Plan
    COMMAND: sqlitch rebase -y
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Reverting all changes from flipr_test
  - hashtags ................ ok
  - userflips @v1.0.0-dev1 .. ok
  - flips ................... ok
  - users ................... ok
Deploying changes to flipr_test
  + users ................... ok
  + flips ................... ok
  + userflips @v1.0.0-dev1 .. ok
  + hashtags ................ ok

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Reverting all changes from flipr_test
  - hashtags .. ok
  - userflips .. ok
  - flips .. ok
  - users .. ok
Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
  + users
  + flips
  + userflips
  + hashtags
Deployment complete. Applied 4 change(s).
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1,10 +1,11 @@
 Reverting all changes from flipr_test
-  - hashtags ................ ok
-  - userflips @v1.0.0-dev1 .. ok
-  - flips ................... ok
-  - users ................... ok
-Deploying changes to flipr_test
-  + users ................... ok
-  + flips ................... ok
-  + userflips @v1.0.0-dev1 .. ok
-  + hashtags ................ ok+  - hashtags .. ok
+  - userflips .. ok
+  - flips .. ok
+  - users .. ok
+Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
+  + users
+  + flips
+  + userflips
+  + hashtags
+Deployment complete. Applied 4 change(s).

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 38: Tag Release v1.0.0-dev2
    COMMAND: sqlitch tag v1.0.0-dev2 -n Tag v1.0.0-dev2.
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Tagged "hashtags" with @v1.0.0-dev2 in sqitch.plan

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Tagged hashtags with @v1.0.0-dev2
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1 +1 @@
-Tagged "hashtags" with @v1.0.0-dev2 in sqitch.plan+Tagged hashtags with @v1.0.0-dev2

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 39: Rework 'userflips' View
    COMMAND: sqlitch rework userflips -n Adds userflips.twitter.
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Added "userflips [userflips@v1.0.0-dev2]" to sqitch.plan.
Modify these files as appropriate:
  * deploy/userflips.sql
  * revert/userflips.sql
  * verify/userflips.sql

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Created rework deploy script deploy/userflips@v1.0.0-dev2.sql
Created rework revert script revert/userflips@v1.0.0-dev2.sql
Created rework verify script verify/userflips@v1.0.0-dev2.sql
Reworked userflips

⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1,5 +1,4 @@
-Added "userflips [userflips@v1.0.0-dev2]" to sqitch.plan.
-Modify these files as appropriate:
-  * deploy/userflips.sql
-  * revert/userflips.sql
-  * verify/userflips.sql+Created rework deploy script deploy/userflips@v1.0.0-dev2.sql
+Created rework revert script revert/userflips@v1.0.0-dev2.sql
+Created rework verify script verify/userflips@v1.0.0-dev2.sql
+Reworked userflips


    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 40: Deploy Reworked View
    COMMAND: sqlitch deploy
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Deploying changes to flipr_test
  + userflips .. ok

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
  + userflips
Deployment complete. Applied 1 change(s).
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1,2 +1,3 @@
-Deploying changes to flipr_test
-  + userflips .. ok+Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
+  + userflips
+Deployment complete. Applied 1 change(s).

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 41: Verify Reworked Schema
    COMMAND: sqlite3 flipr_test.db .schema userflips
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
CREATE VIEW userflips AS
SELECT f.id, u.nickname, u.fullname, u.twitter, f.body, f.timestamp
FROM users u
JOIN flips f ON u.nickname = f.nickname
/* userflips(id,nickname,fullname,twitter,body,timestamp) */;

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
CREATE VIEW userflips AS
SELECT f.id, u.nickname, u.fullname, u.twitter, f.body, f.timestamp
FROM users u
JOIN flips f ON u.nickname = f.nickname
/* userflips(id,nickname,fullname,twitter,body,timestamp) */;

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 42: Revert Reworked Change
    COMMAND: sqlitch revert --to @HEAD^ -y
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Reverting changes to hashtags @v1.0.0-dev2 from flipr_test
  - userflips .. ok

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Reverting changes to hashtags from flipr_test
  - userflips .. ok
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1,2 +1,2 @@
-Reverting changes to hashtags @v1.0.0-dev2 from flipr_test
+Reverting changes to hashtags from flipr_test
   - userflips .. ok

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 43: Verify Revert of Rework
    COMMAND: sqlite3 flipr_test.db .schema userflips
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
CREATE VIEW userflips AS
SELECT f.id, u.nickname, u.fullname, f.body, f.timestamp
FROM users u
JOIN flips f ON u.nickname = f.nickname
/* userflips(id,nickname,fullname,body,timestamp) */;

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
CREATE VIEW userflips AS
SELECT f.id, u.nickname, u.fullname, f.body, f.timestamp
FROM users u
JOIN flips f ON u.nickname = f.nickname
/* userflips(id,nickname,fullname,body,timestamp) */;

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 44: Final Deployment
    COMMAND: sqlitch deploy
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Deploying changes to flipr_test
  + userflips .. ok

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
  + userflips
Deployment complete. Applied 1 change(s).
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1,2 +1,3 @@
-Deploying changes to flipr_test
-  + userflips .. ok+Deploying plan 'flipr' to target 'db:sqlite:flipr_test.db'.
+  + userflips
+Deployment complete. Applied 1 change(s).

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 45: Final Verification
    COMMAND: sqlitch verify
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
Verifying flipr_test
  * users ................... ok
  * flips ................... ok
  * userflips @v1.0.0-dev1 .. ok
  * hashtags @v1.0.0-dev2 ... ok
  * userflips ............... ok
Verify successful

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
Verifying flipr_test
  * users .. ok
  * flips .. ok
  * userflips .. ok
  * hashtags .. ok
  * userflips .. ok
Verify successful
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -1,7 +1,7 @@
 Verifying flipr_test
-  * users ................... ok
-  * flips ................... ok
-  * userflips @v1.0.0-dev1 .. ok
-  * hashtags @v1.0.0-dev2 ... ok
-  * userflips ............... ok
+  * users .. ok
+  * flips .. ok
+  * userflips .. ok
+  * hashtags .. ok
+  * userflips .. ok
 Verify successful

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
▶️  STEP 46: Final Status Check
    COMMAND: sqlitch status
============================================================

    ┌───────────────────────────┐
    │   Running sqitch (💎)     │
    └───────────────────────────┘
# On database flipr_test
# Project:  flipr
# Change:   e6445f6fc5159f59d5fe263b95a927c66cdc291a
# Name:     userflips
# Deployed: 2025-10-11 21:03:13 +0200
# By:       Test User <test@example.com>
# 
Nothing to deploy (up-to-date)

    ┌───────────────────────────┐
    │   Running sqlitch (✨)    │
    └───────────────────────────┘
# On database flipr_test
# Project:  flipr
# Change:   2056c5ea5e708c27e636d24512426f08f5d0e32b
# Name:     userflips
# Deployed: 2025-10-11 19:03:13.139647
# By:       Test User <test@example.com>
# 
Nothing to deploy (up-to-date)
⚠️  Command output differs (this may be OK if user state matches)

Output diff:
--- sqitch(out)
+++ sqlitch(out)
@@ -2,7 +2,7 @@
 # Project:  flipr
 # Change:   [REDACTED_CHANGE_ID]
 # Name:     userflips
-# Deployed: 2025-10-11 21:03:13 +0200
+# Deployed: 2025-10-11 19:03:13.139647
 # By:       Test User <test@example.com>
 # 
 Nothing to deploy (up-to-date)

    ✅ User-visible database 'sqitch.db' matches

    ✅ User-visible database 'flipr_test.db' matches

    ✅ Step completed successfully

============================================================
  ✅ ALL TESTS PASSED!
  sqitch and sqlitch are functionally equivalent (user-facing).
============================================================
